{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","profileDataText","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","profileBlock","descriptionBlock","alt","src","photos","large","userPhoto","mainPhoto","fileOpen","target","files","length","initialValues","formData","then","Post","item","userPng","messagePost","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.84a7dc9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"ProfileInfo_profileBlock__ksAdu\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1L4bJ\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2QXLT\",\"contact\":\"ProfileInfo_contact__1FFu7\",\"fileOpen\":\"ProfileInfo_fileOpen__2-wd5\",\"status\":\"ProfileInfo_status__3TmKf\",\"form\":\"ProfileInfo_form__1UApK\",\"postsBlock\":\"ProfileInfo_postsBlock__2toNM\",\"posts\":\"ProfileInfo_posts__i6wuI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3QP5Z\",\"messagePost\":\"Post_messagePost__23eFZ\"};","import React, { useState, useEffect } from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div className={s.status}>\n            { !editMode &&\n                <div>\n                   <span onDoubleClick={activateEditMode}>{props.status || \"Изменить статус\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                        value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>Сохранить</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Имя</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Ищу работу</b>: { createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Профессиональные навыки</b>:\r\n            { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>Обо мне</b>:\r\n            { createField(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div >\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <img alt='' src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n                <div className={s.fileOpen}>\r\n                    {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                </div>\r\n            </div>\r\n            <div className={s.form}>\r\n            { editMode\r\n                ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n    return <div className={s.profileDataText}>\r\n        {isOwner && <div><button onClick={goToEditMode}>Редактировать</button></div>}\r\n        <div>\r\n            <b>Имя</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Ищу работу</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>Профессиональные навыки</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n\r\n        <div>\r\n            <b>Обо мне</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Контакты</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport userPng from '../../../../assets/images/user.png'\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img alt='' src={userPng} />\r\n        <div className={s.messagePost}>{ props.message }</div>\r\n          <div>\r\n        <span>like:</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './../ProfileInfo/ProfileInfo.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(40);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Сообщение\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button>Отправить</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>Мои сообщения</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId ) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}